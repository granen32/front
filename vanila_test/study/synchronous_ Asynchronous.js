// 동기는 말 그대로 동시에 일어난다는 뜻입니다. 요청과 그 결과가 동시에 일어난다는 약속인데요. 바로 요청을 하면 시간이 얼마가 걸리던지 요청한 자리에서 결과가 주어져야 합니다.

// 자바스크립트 싱글 쓰레드 작업수행 방ㅣ

// Thread -> task a(0.3초) -> task b(0.5초) -> taskc(블로킹방식/1초)

// 자바스크립트 코드는 코드가 작성된 순서대로 작업을 처리함
// 이전 작업이 진행 중 일떄는 다음 작업을 수행하지 않고 기다림
// 먼저 작동된 코드를 먼저 다 실행하고 나서 뒤에 작성된 코드를 실행한다.
/*
쓰레드는 코드를 한줄한줄 실행해준다.
동기적 처리의 단점은 하나의 작업이 너무 오래 걸리게 될시,
모든 작업이 오래 걸리는 하나의 작업이 종료되기 전까지 올스탑 되기 때문에 전박적인 흐름이 느려진다.
**동기처리 방식의 문제점**
*/

// 멀티쓰레드
/*
코드를 실행하는 일꾼 thread를 여러 개 사용하는 방식인 multithread 방식으로 작동시키면 작업 분할이 가능하나
자바스크립트는 쓰레드가 1개밖에 없다.
*/

// 비동기 처리방식

/*
싱글 쓰레드 방식을 이용하면서, 동기적 작업의 단점을 극복하기 위해 여러 개의 작업을 동시에 실행시킴
즉, 먼저 작성된 코드의 결과를 기다리지 않고 다음 코드를 바로 실행함
이러한 작업을 비동기 작업이라 한다.

thread taskc(10초)
       taskb(20초)
       taska(30초)
콜백 함수를 사용하여 이 결과값을 몇초내로 처리가 되는지 콜백함수와 콜백함수의 결과값을 꼭 붙여줘야 한다.
*/

function taskA(a,b, cb){
  setTimeout(()=> {
    const res = a + b;
    console.log(res);
    cb(res);
  }, 2000)
}

function taskB(a,cb){
  setTimeout(()=>{
    const res = a*2;
    cb(res);
  }, 1000)
}


taskA(3,4, (res)=> {console.log("a tsk result :", res)});
taskB(7, (res)=> {console.log("a tsk result :", res)});
console.log("코드 끝");
// 

// 지시한 순서는 테스크 a가 먼저지만 콘솔로그가 먼저 찍히게 된다.
// 먼저 있는 작업이 진행되지 않고 다음 작업을 바로 실행해 버리는 걸 비동기 작업이라고 얘기한다.

